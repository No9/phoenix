#!/usr/bin/env node
var nomnom   = require('nomnom');
var proquint = require('proquint-');
var fs       = require('fs');
var pull     = require('pull-stream');
var keys     = require('./js/common/keys');
var ssb      = require('./js/common/ssb');

function namefileHelp() {
	console.log('You don\'t have a ~/.scuttlebutt/secret.name yet; run the \'init\' command.');
}

function init(opts) {
	// Setup keys
	keys.create(opts['force-new-keypair'], function(err) {
		if (err) {
			if (err.fatal) {
				console.error(err.toString());
				return;
			}
			console.error('Warning' + err.toString().slice(5));
		}
		// Setup database
		// :TODO:
		console.log('Ready.');
	});
}

function serve(opts) {
	require('./js/relay').createServer(64000);
	console.log('Scuttlebutt relay.....listening publicly on localhost:64000');
	require('./js/localhost').createServer(65000);
	console.log('Web GUI...............listening privately on localhost:65000');
}

function whoami(opts) {
	if (keys.exist) {
		console.log('You are: ' + proquint.encode(keys.name));
		console.log('    hex: ' + keys.name.toString('hex'));
	} else {
		namefileHelp();
	}
}

function list(opts) {
	pull(
		ssb.following(),
		pull.collect(function(err, entries) {
			// :TODO: nicknames
			entries.forEach(function(entry) {
				console.log('???  ' + entry.key);
			});
			console.log(entries.length + ' feed(s).');
		})
	);
}

function follow(opts) {
	// Validate key
	// :TODO:

	// Add to follow list
	ssb.follow(opts.key, function(err) {
		if (err) {
			console.error(err);
		} else {
			console.log('Ok.');
		}
	});
}

function unfollow(opts) {
	// Remove from follow list
	ssb.unfollow(opts.key, function(err) {
		if (err) {
			console.error(err);
		} else {
			console.log('Ok.');
		}
	});
}

/*
Ok yeah, so now you'll have to
*/

function sign(opts) {
	console.log('Signing ' + opts.path);

	if (!keys.exist) {
		return namefileHelp();
	}

	var buffer;
	try {
		buffer = fs.readFileSync(opts.path);
	} catch (e) {
		console.error('Error: File not found');
		return;
	}

	var sig = keys.sign(buffer);
	console.log('Signature: ' + sig.toString('hex'));
}

function verify(opts) {
	console.log('Verifying ' + opts.path);

	var key = opts.key || keys.public;
	if (!key) {
		return namefileHelp();
	}

	var buffer;
	try {
		buffer = fs.readFileSync(opts.path);
	} catch (e) {
		console.error('Error: File not found');
		return;
	}

	if (keys.verify(buffer, new Buffer(opts.sig, 'hex'), key)) {
		console.log('Success: Signature checks out.');
	} else {
		console.log('Failure: Signature does not match.');
	}
}

nomnom.command('init')
	.help('Sets up phoenix.')
	.option('force-new-keypair', {
		flag: true,
		help: 'Overwrites your ~/.scuttlebutt/secret.name file with a new keypair if it already exists.'
	})
	.callback(init);
nomnom.command('serve')
	.help('Runs the relay and web-gui server.')
	.callback(serve);
nomnom.command('whoami')
	.help('Lists your profile.')
	.callback(whoami);
nomnom.command('post')
	.help('Posts a message to your feed.')
	.callback(function(opts) {
		console.log('Not yet implemented');
	});
nomnom.command('list')
	.help('Lists the feeds you follow.')
	.callback(list);
nomnom.command('lookup')
	.help('Looks up a feed by its nickname.')
	.options({
		name: {
			position: 1,
			required: true,
			help: 'Nickname to lookup.',
		}
	})
	.callback(function(opts) {
		console.log('Not yet implemented');
		console.log('8e5c1add8d7455b5ba055b2d141ac9238a5ba485f7a488146c646fd8135fe27f');
	});
nomnom.command('follow')
	.help('Starts following a feed.')
	.options({
		key: {
			position: 1,
			required: true,
			help: 'Public key to follow.'
		}
	})
	.callback(follow);
nomnom.command('unfollow')
	.help('Stops following a feed.')
	.options({
		key: {
			position: 1,
			required: true,
			help: 'Public key to unfollow.'
		}
	})
	.callback(unfollow);
nomnom.command('sign')
	.help('Creates a signature for a file.')
	.options({
		path: {
			position: 1,
			required: true,
			help: 'File to sign.',
		}
	})
	.callback(sign);
nomnom.command('verify')
	.help('Verifies a signature for a file.')
	.options({
		path: {
			position: 1,
			required: true,
			help: 'File to verify.',
		},
		sig: {
			position: 2,
			required: true,
			help: 'Signature to verify (hex-encoded).',
		},
		key: {
			position: 3,
			help: 'Public key of the user who created the signature (defaults to yours).'
		}
	})
	.callback(verify);
nomnom.parse();