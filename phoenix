#!/usr/bin/env nodejs
var nomnom     = require('nomnom');


/*function sign(opts) {
	console.log('Signing ' + opts.path);

	if (!keys.exist) {
		return namefileHelp();
	}

	var buffer;
	try {
		buffer = fs.readFileSync(opts.path);
	} catch (e) {
		console.error('Error: File not found');
		return;
	}

	var sig = keys.sign(buffer);
	console.log('Signature: ' + sig.toString('hex'));
}

function verify(opts) {
	console.log('Verifying ' + opts.path);

	var key = opts.key || keys.public;
	if (!key) {
		return namefileHelp();
	}

	var buffer;
	try {
		buffer = fs.readFileSync(opts.path);
	} catch (e) {
		console.error('Error: File not found');
		return;
	}

	if (keys.verify(buffer, new Buffer(opts.sig, 'hex'), key)) {
		console.log('Success: Signature checks out.');
	} else {
		console.log('Failure: Signature does not match.');
	}
}*/

nomnom.script('phoenix')
	.option('config', {
		help: 'Sets the config-file (default ./.phoenixrc)'
	});
 nomnom.nocommand()
	.callback(require('./js/cli/core').list);
nomnom.command('setup')
	.help('Creates a new profile and feed.')
	.option('force-new-keypair', {
		flag: true,
		help: 'Overwrites your secret.name file with a new keypair if it already exists.'
	})
	.callback(require('./js/cli/core').setup);
nomnom.command('feed')
	.help('Shows the feed messages (default action).')
	.options({
		long: {
			flag: true,
			help: 'Flag, output more detailed information.'
		},
		tail: {
			flag: true,
			help: 'Flag, keep output stream open.'
		}
	})
	.callback(require('./js/cli/core').list);
nomnom.command('feeds')
	.help('Lists the users you follow.')
	.callback(require('./js/cli/feeds').feeds);
nomnom.command('post')
	.help('Posts a message to your feed.')
	.options({
		text: {
			position: 1,
			required: true,
			help: 'Message-text to post.'
		}
	})
	.callback(require('./js/cli/core').post);
nomnom.command('whoami')
	.help('Shows your profile.')
	.callback(require('./js/cli/feeds').whoami);
nomnom.command('follow')
	.help('Starts following a user.')
	.options({
		key: {
			position: 1,
			required: true,
			help: 'Public key to follow.'
		}
	})
	.callback(require('./js/cli/feeds').follow);
nomnom.command('unfollow')
	.help('Stops following a user.')
	.options({
		name: {
			position: 1,
			required: true,
			help: 'Nickname or user number to unfollow.',
		}
	})
	.callback(require('./js/cli/feeds').unfollow);
nomnom.command('lookup')
	.help('Looks up a user\'s profile by their nickname.')
	.options({
		name: {
			position: 1,
			required: true,
			help: 'Nickname or user number to lookup.',
		},
		pubkey: {
			flag: true,
			help: 'Flag, output the user\'s public key rather than their id.'
		}
	})
	.callback(require('./js/cli/feeds').lookup);
nomnom.command('verify')
	.help('Verifies a user account by an in-person or over-the-phone exchange.')
	.options({
		nickname: {
			position: 1,
			required: true,
			help: 'Nickname or user number to verify.',
		}
	})
	.callback(require('./js/cli/trust').verify);
/*nomnom.command('sign')
	.help('Creates a signature for a file.')
	.options({
		path: {
			position: 1,
			required: true,
			help: 'File to sign.',
		}
	})
	.callback(sign);
nomnom.command('verify')
	.help('Verifies a signature for a file.')
	.options({
		path: {
			position: 1,
			required: true,
			help: 'File to verify.',
		},
		sig: {
			position: 2,
			required: true,
			help: 'Signature to verify (hex-encoded).',
		},
		key: {
			position: 3,
			help: 'Public key of the user who created the signature (defaults to yours).'
		}
	})
	.callback(verify);*/
nomnom.command('sync')
	.help('Adds a server to your replication network.')
	.options({
		host: {
			position: 1,
			help: 'Address of the server (<address>[:port]).',
		}
	})
	.callback(require('./js/cli/netnodes').addNode);
nomnom.command('unsync')
	.help('Removes a server from your replication network.')
	.options({
		host: {
			position: 1,
			required: true,
			help: 'Address of the server (<address>[:port]).',
		}
	})
	.callback(require('./js/cli/netnodes').delNode);
/*nomnom.command('rebuild')
	.help('Reconstructs the application cache from the message logs.')
	.callback(rebuild);*/
nomnom.parse();