#!/usr/bin/env node
var nomnom     = require('nomnom');


nomnom.script('phoenix')
	.nocolors()
	.option('config', {
		help: 'Sets the config-file (default ./.phoenixrc)'
	});
 nomnom.nocommand()
	.callback(require('./cli_tool/core').list);
nomnom.command('setup')
	.help('Creates a new profile and feed.')
	.option('force-new-keypair', {
		flag: true,
		help: 'Overwrites your secret.name file with a new keypair if it already exists.'
	})
	.callback(require('./cli_tool/core').setup);
nomnom.command('feed')
	.help('Shows the feed messages (default action).')
	.options({
		long: {
			flag: true,
			help: 'Flag, output more detailed information.'
		},
		tail: {
			flag: true,
			help: 'Flag, keep output stream open.'
		}
	})
	.callback(require('./cli_tool/core').list);
nomnom.command('feeds')
	.help('Lists the users you follow.')
	.callback(require('./cli_tool/feeds').feeds);
nomnom.command('post')
	.help('Posts a message to your feed.')
	.options({
		text: {
			position: 1,
			required: true,
			help: 'Message-text to post.'
		}
	})
	.callback(require('./cli_tool/core').post);
nomnom.command('whoami')
	.help('Shows your profile.')
	.callback(require('./cli_tool/feeds').whoami);
nomnom.command('follow')
	.help('Starts following a user.')
	.options({
		key: {
			position: 1,
			required: true,
			help: 'Public key to follow.'
		}
	})
	.callback(require('./cli_tool/feeds').follow);
nomnom.command('unfollow')
	.help('Stops following a user.')
	.options({
		name: {
			position: 1,
			required: true,
			help: 'Nickname or user number to unfollow.',
		}
	})
	.callback(require('./cli_tool/feeds').unfollow);
nomnom.command('lookup')
	.help('Looks up a user\'s profile by their nickname.')
	.options({
		name: {
			position: 1,
			required: true,
			help: 'Nickname or user number to lookup.',
		},
		pubkey: {
			flag: true,
			help: 'Flag, output the user\'s public key rather than their id.'
		}
	})
	.callback(require('./cli_tool/feeds').lookup);
/*nomnom.command('verify')
	.help('Verifies a user account by an in-person or over-the-phone exchange.')
	.options({
		nickname: {
			position: 1,
			required: true,
			help: 'Nickname or user number to verify.',
		}
	})
	.callback(require('./cli_tool/trust').verify);
nomnom.command('sign')
	.help('Creates a signature for a file.')
	.options({
		path: {
			position: 1,
			required: true,
			help: 'File to sign.',
		}
	})
	.callback(sign);
nomnom.command('verify')
	.help('Verifies a signature for a file.')
	.options({
		path: {
			position: 1,
			required: true,
			help: 'File to verify.',
		},
		sig: {
			position: 2,
			required: true,
			help: 'Signature to verify (hex-encoded).',
		},
		key: {
			position: 3,
			help: 'Public key of the user who created the signature (defaults to yours).'
		}
	})
	.callback(verify);*/
nomnom.command('sync')
	.help('Adds a server to your replication network.')
	.options({
		host: {
			position: 1,
			help: 'Address of the server (<address>[:port]).',
		}
	})
	.callback(require('./cli_tool/netnodes').addNode);
nomnom.command('unsync')
	.help('Removes a server from your replication network.')
	.options({
		host: {
			position: 1,
			required: true,
			help: 'Address of the server (<address>[:port]).',
		}
	})
	.callback(require('./cli_tool/netnodes').delNode);
nomnom.command('serve')
  .help('Starts the web server.')
  .options({
    pub: {
      flag: true,
      abbr: 'p',
    	help: 'Run the pub server in addition to the home server (advanced feature).'
    },
    daemon: {
      flag: true,
      abbr: 'd',
      help: 'Run the server in the background as a daemon.'
    },
    homeport: {
      help: 'Sets the port for the home server.'
    },
    pubport: {
    	help: 'Sets the port for the pub server.'
    },
    dontopen: {
      flag: true,
      abbr: 'n',
      help: 'Don\'t open the page in the browser once the server starts.'
    },
    ws: {
      flag: true,
      help: 'Open the websocket interface (under development, not recommended).'
    }
  })
  .callback(require('./cli_tool/http-server').start);
nomnom.command('killserver')
  .help('Stops the web-server daemon if it\'s active.')
  .callback(require('./cli_tool/http-server').stop);
nomnom.command('deploy')
  .help('Deploys the phoenix pub server over ssh to a remote host.')
  .options({
    dest: {
      position: 1,
      required: true,
      help: 'The user and domain of your SSH destination (eg bob@server.com).'
    },
    reinstall: {
      flag: true,
      help: 'Deletes the existing deployment and all of its configuration, then installs a fresh copy.'
    },
    update: {
      flag: true,
      help: 'Preserves the existing configuration and updates the software.'
    }
  })
  .callback(require('./cli_tool/deploy').deploy);
nomnom.parse();