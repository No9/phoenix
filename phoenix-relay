#!/usr/bin/env nodejs
var nomnom     = require('nomnom');
var ssh2       = require('ssh2');
var path       = require('path');

function namefileHelp() {
	console.log('You don\'t have a ~/.phoenix/secret.name yet; run \'phoenix setup\' first.');
}

function deploy(opts) {
	var keys       = require('./js/common/keys');
	var netnodes   = require('./js/common/network-nodes');

	var deploySteps = [
		'cd ~/phoenix && node ~/phoenix/phoenix-relay stop',

		'cd ~/.phoenix && rm -Rf ~/.phoenix',
		'mkdir ~/.phoenix',

		'rm -Rf ~/phoenix',
		'git clone https://github.com/pfraze/phoenix.git ~/phoenix',
		'cd ~/phoenix && npm install',

		'echo "' + keys.name.toString('hex') + '" > ~/phoenix/.relay-members',

		'cd ~/phoenix && node ./phoenix-relay start -d'
	];
	var deployErrors = [
		false,

		false,
		'Failed to create a user-configuration directory.',

		false,
		'Failed to clone phoenix repo.',
		'Failed to install dependencies.',

		'Failed to write your public key into the allowed relay users.',

		'Failed to start the phoenix relay daemon.'
	];

	if (!keys.exist) return namefileHelp();

	var dest = /^(.*)@(.*)(?:\:(.*))?$/.exec(opts.dest);
	if (!dest)
		return console.error('Destination must include the ssh user and hostname (eg bob@host.com)');

	var connInfo = {
		username: dest[1],
		host: dest[2],
		port: dest[3] || 22,
		password: undefined
	};

	var conn = new ssh2();
	process.stdout.write('Password: ');
	getPassword(function(pass) {
		connInfo.password = pass;
		conn.connect(connInfo);
	});
	conn.on('ready', function() {
		console.log('Established ssh connection with ' + connInfo.host + ':' + connInfo.port + '.');
		sshDoAll(deploySteps, deployErrors, function() {
			console.log('');
			console.log('Access granted:');
			console.log('- "Member." You can sync anybody\'s feed to ' + connInfo.host + '.');
			console.log('- "Syncing." Background-syncing with ' + connInfo.host + '.');
			netnodes.add(connInfo.host, 64000, function(err) {
				if (err) {
					console.error('Failed to store '+ connInfo.host + ':64000 into your server-table.');
					console.error('Try again by calling \'phoenix sync ' + connInfo.host + ':64000\'');
				}
				console.log('Ok.');
			});
		});
	});
	conn.on('error', function(err) {
		console.error('Failed to establish ssh connection with ' + connInfo.host + ':' + connInfo.port + '.');
		console.error(err.toString());
	});

	function sshDoAll(cmds, errors, cb) {
		next();
		function next() {
			var cmd = cmds.shift();
			var errMsg = errors.shift();
			var ignoreFailure = (errMsg === false);
			sshDo(cmd, function(err) {
				if (err && !ignoreFailure) return conn.end(), console.error(errMsg);
				if (cmds.length) next();
				else conn.end(), cb();
			});
		}
	}
	function sshDo(cmd, cb) {
		console.log('> ', cmd);
		conn.exec(cmd, function(err, stream) {
			if (err) throw err;
			stream
				.on('exit', function(code, signal) {
					if (code !== 0) {
						return cb(new Error('Process exited with error code ' + code));
					}
					cb();
				})
				.on('data', function(data) {
					process.stdout.write(data);
				})
				.stderr.on('data', function(data) {
					process.stderr.write(data);
				});
		});
	}
}

function getPassword(cb) {
	var stdin = process.openStdin();
	process.stdin.resume();
	process.stdin.setEncoding('utf8');
	process.stdin.setRawMode(true);
	var password = '';
	process.stdin.on('data', function (char) {
		char = char + "";

		switch (char) {
			case "\n": case "\r": case "\u0004":
				// They've finished typing their password
				process.stdin.setRawMode(false);
				stdin.pause();
				console.log('');
				cb(password);
				break;
			case "\u0003":
				// Ctrl C
				console.log('\nCancelled');
				process.exit();
				break;
			default:
				password += char;
				break;
		}
	});
}

function start(opts) {
	var config = require('./js/common/config');
	if (opts.directory) {
		// Setup the directory for storing our data
		opts.directory = path.join(__dirname, opts.directory);
		config.setup(opts.directory);
	}

	if (opts.daemon) {
		// Daemon-mode
		var daemon = require("daemonize2").setup({
			main: "js/daemon.js",
			name: "phoenix-relay",
			pidfile: path.join(config.sbhome, "./phoenix-relay.pid"),
			argv: [opts.directory || "0", opts.port || "64000", "0"]
		});
		daemon.start();
	} else {
		// FG mode
		var relayPort = opts.port || 64000;
		require('./js/relay').createServer(relayPort);
		console.log('Scuttlebutt relay.....listening publicly on localhost:' + relayPort);
	}
}

function stop(opts) {
	var config = require('./js/common/config');
	if (opts.directory) {
		// Setup the directory for storing our data
		opts.directory = path.join(__dirname, opts.directory);
		config.setup(opts.directory);
	}

	console.log(config.sbhome);

	var daemon = require("daemonize2").setup({
		main: "js/daemon.js",
		name: "phoenix-relay",
		pidfile: path.join(config.sbhome, "./phoenix-relay.pid"),
	});
	daemon.stop();
}

nomnom.script('phoenix-relay');
nomnom.command('deploy')
	.help('Deploys the relay software over ssh.')
	.option('dest', {
		position: 1,
		required: true,
		help: 'The user and domain of your SSH destination (eg bob@server.com).'
	})
	.callback(deploy);
nomnom.command('start')
	.help('Starts the relay service.')
	.options({
		directory: {
			position: 1,
			help: 'The directory to store data and configuration in (default ~/.phoenix).'
		},
		daemon: {
			flag: true,
			abbr: 'd',
			help: 'Run the relay in the background as a daemon.'
		},
		port: {
			abbr: 'p',
			help: 'Sets the port to accept connections on.'
		}
	})
	.callback(start);
nomnom.command('stop')
	.help('Stops the relay daemon if it\'s active.')
	.options({
		directory: {
			position: 1,
			help: 'The directory to store data and configuration in (default ~/.phoenix).'
		}
	})
	.callback(stop);
nomnom.parse();